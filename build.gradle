buildscript {
	ext {
		springBootVersion = '1.5.10.RELEASE'
	}
	repositories {
		mavenCentral()
		maven{url "https://plugins.gradle.org/m2/"}
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
 		classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.0.0"
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '1.5.10.RELEASE'
	id 'application'
	id 'jacoco'
	id 'com.github.kt3k.coveralls' version '2.8.1'
}

allprojects{
	apply plugin: 'maven-publish'
	apply plugin: "com.jfrog.artifactory"
}

sourceCompatibility = 1.8

targetCompatibility = 1.8

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

group 'com.blackducksoftware.integration.fortify'
version = '2.0.9'

mainClassName = 'com.blackducksoftware.integration.fortify.Application'

applicationDefaultJvmArgs = ["-Dspring.config.location=../config/"]

startScripts {
	doLast {
		windowsScript.text = windowsScript.text.replace("%CMD_LINE_ARGS%", "--spring.config.location=../config/")
	}
}

ext {
	springBeanVersion = '4.3.20.RELEASE'
	springBootVersion = '1.5.11.RELEASE'
	springBatchCoreAndInfrastructureVersion = '3.0.10.RELEASE'
	apacheTomcatVersion = "8.5.47"
	hubCommonVersion = '35.0.0'
	retrofit2Version = '2.1.0'
	okhttp3Version = '3.3.1'
	powerMockitoVersion = '1.6.6'
	jacksonDataBindVersion = '2.9.10.1'
	jacksonDataAnnotationVersion = '2.9.7'
	simpleXmlFrameworkVersion = '2.7'
	jUnitVersion = '4.+'
	xstreamVersion = '1.4.11.1'
	uploadDefs = new File("${rootDir}/uploadArtifacts.gradle")
	HUB_USERNAME=System.getenv('HUB_USERNAME')
	HUB_PASSWORD=System.getenv('HUB_PASSWORD')
	HUB_TIMEOUT=System.getenv('HUB_TIMEOUT')
	HUB_SERVER_URL=System.getenv('HUB_SERVER_URL')
	HUB_API_TOKEN=System.getenv('HUB_API_TOKEN')
	FORTIFY_SERVER_URL=System.getenv('FORTIFY_SERVER_URL')
	FORTIFY_USERNAME=System.getenv('FORTIFY_USERNAME')
	FORTIFY_PASSWORD=System.getenv('FORTIFY_PASSWORD')

	buildName = 'hub-fortify-ssc-integration-service'
	uploadRepoKey = System.properties['uploadRepoKey'] ?: 'bds-alliance-snapshot'
}

repositories {
	mavenCentral()
}

dependencies {
	compile("org.springframework:spring-beans:${springBeanVersion}")
	compile("org.springframework:spring-jdbc:${springBeanVersion}")
	compile("org.springframework:spring-context:${springBeanVersion}")
	compile("org.springframework:spring-expression:${springBeanVersion}")
	compile("org.springframework:spring-aop:${springBeanVersion}")
	compile("org.springframework:spring-core:${springBeanVersion}")
	compile("org.springframework:spring-test:${springBeanVersion}")
	compile("org.springframework:spring-tx:${springBeanVersion}")
	compile("org.springframework.boot:spring-boot:${springBootVersion}")
	compile("org.springframework.boot:spring-boot-starter:${springBootVersion}")
	compile("org.springframework.boot:spring-boot-starter-batch:${springBootVersion}") {
		exclude group: 'com.fasterxml.jackson.core', module: 'jackson-databind'
	}
	compile("org.springframework.boot:spring-boot-starter-logging:${springBootVersion}")
	compile("org.springframework.boot:spring-boot-starter-jdbc:${springBootVersion}")
	compile("org.springframework.boot:spring-boot-loader:${springBootVersion}")
	compile("org.springframework.boot:spring-boot-autoconfigure:${springBootVersion}")
	compile("org.springframework.batch:spring-batch-core:${springBatchCoreAndInfrastructureVersion}")
	compile("org.springframework.batch:spring-batch-infrastructure:${springBatchCoreAndInfrastructureVersion}")
	compile("org.simpleframework:simple-xml:${simpleXmlFrameworkVersion}")
	compile("com.thoughtworks.xstream:xstream:${xstreamVersion}")
	compile("com.fasterxml.jackson.core:jackson-databind:${jacksonDataBindVersion}")
	compile("com.blackducksoftware.integration:hub-common:${hubCommonVersion}")
	compile("com.squareup.retrofit2:retrofit:${retrofit2Version}")
	compile("com.fasterxml.jackson.core:jackson-annotations:${jacksonDataAnnotationVersion}")
	compile("com.squareup.retrofit2:converter-gson:${retrofit2Version}")
	compile("com.google.code.gson:gson")
	compile("com.squareup.okhttp3:okhttp:${okhttp3Version}")
	compile("com.squareup.okhttp3:logging-interceptor:${okhttp3Version}")
	compile("com.squareup.okhttp3:okhttp-urlconnection:${okhttp3Version}")
	compile("com.squareup.retrofit2:converter-simplexml:${retrofit2Version}")
	compile("com.fasterxml.jackson.dataformat:jackson-dataformat-csv")
	compile("org.apache.tomcat:tomcat-juli:${apacheTomcatVersion}")
	compile("org.apache.tomcat:tomcat-jdbc:${apacheTomcatVersion}")
	testCompile("org.powermock:powermock-api-mockito:${powerMockitoVersion}")
	testCompile("org.powermock:powermock-module-junit4:${powerMockitoVersion}")
	testCompile("junit:junit:${jUnitVersion}")
	testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
}

task wrapper(type: Wrapper) {
	gradleVersion = '3.1'
}

jar {
	manifest {
		attributes( 'Main-Class': 'com.blackducksoftware.integration.fortify.Application',
		'Class-Path': configurations.compile.collect { it.getName() }.join(' '))
	}

	sourceSets {
		main {
			resources {
				exclude 'mapping.json'
			}
		}
	}
}

distributions {
	main {
		contents {
			from("${buildDir}/resources/main/application_prod.properties") {
				into 'config/'
				rename {'application.properties'}
			}
			from("${buildDir}/resources/main/attributes_prod.properties") {
				into 'config/'
				rename {'attributes.properties'}
			}
			from("${buildDir}/resources/main/mapping_prod.json") {
				into 'config/'
				rename {'mapping.json'}
			}
			from("${buildDir}/resources/main/batch_job_status.txt") {into 'config/'}
			from("${project.buildDir}/resources/main/hub-fortify.log") {into 'log/'}
			from('sample.csv') { into 'report/'}
		}
	}
}

publishing{
	publications{
		maven(MavenPublication) {
			from components.java
			artifact distZip
			artifact distTar
		}
	}
}

jacocoTestReport {
	reports {
		xml.enabled = true
		html.enabled = true
	}
}

processResources {
	filesMatching("**/application*.properties") {
		expand(project.properties)
	}
}
